;; ------------------------
;; Package Manager Setup
;; ------------------------
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(package-initialize)

;; Ensure use-package is installed
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)

;; Lua Keybindings
(with-eval-after-load 'lua-mode
  ;; Remove old keys first (optional if reloading)
  (define-key lua-mode-map (kbd "C-c C-c") nil)
  (define-key lua-mode-map (kbd "C-c C-d") nil)
  (define-key lua-mode-map (kbd "C-c C-l") nil)
  (define-key lua-mode-map (kbd "C-c C-f") nil)

  ;; Now define them cleanly
  (define-key lua-mode-map (kbd "C-c C-c") 'lua-send-current-line)
  (define-key lua-mode-map (kbd "C-c C-d") 'lua-send-region)
  (define-key lua-mode-map (kbd "C-c C-l") 'lua-send-buffer)
  (define-key lua-mode-map (kbd "C-c C-f") 'lua-search-documentation))


;; ------------------------
;; Startup UI
;; ------------------------
(setq inhibit-startup-screen t)   ;; disable welcome screen
(setq initial-scratch-message "") ;; empty scratch buffer

;; ------------------------
;; Global line numbers
;; ------------------------ 
(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'absolute)  ;; or 'relative

;; Force solid background for line numbers, this is used to supress colored artifact pixels when using relative line numbering
;; Reported the bug to the emacs bug tracker mailing list 
;;(set-face-attribute 'line-number nil
;;  :background "#282a36"   ;; Dracula background color
;;  :foreground "#6272a4") ;; Dracula line number color

;; (set-face-attribute 'line-number-current-line nil
;;  :background "#282a36"   ;; same as background, no transparency
;;  :foreground "#f8f8f2") ;; brighter for current line

;; (setq display-line-numbers-width 100)

;; ------------------------
;; Theme
;; ------------------------
;; (use-package dracula-theme
;; :ensure t
;; :config
;; (load-theme 'dracula t))
 
;; ------------------------
;; Company-mode (autocomplete)
;; ------------------------
(use-package company
  :ensure t
  :hook (after-init . global-company-mode)
  :config
  (setq company-idle-delay 0.2        ;; show completions after 0.2 sec
        company-minimum-prefix-length 1)

;; Custom filter for candidates to prevent number completion.
  (push (apply-partially #'cl-remove-if
                         (lambda (c)
                           (or (string-match-p "[^\x00-\x7F]+" c)
                               (string-match-p "[0-9]+" c)
                               (and (eq major-mode 'org-mode)
                                    (>= (length c) 15)))))
        company-transformers))

;; Configure company for SuperCollider specifically
(add-hook 'sclang-mode-hook
          (lambda ()
            (company-mode 1)
            (setq-local company-backends
                        '(company-capf company-dabbrev-code))
            (setq sclang-autocomplete-enable t)))

;; ------------------------
;; SuperCollider Emacs Integration
;; ------------------------
;; Adjust this path to where you installed the SC Quark 'scel'
(add-to-list 'load-path "~/.local/share/SuperCollider/downloaded-quarks/scel/el")
(require 'sclang)


;; ------------------------
;; Associate .scd and .sc files automatically
  (add-to-list 'auto-mode-alist '("\\.scd$" . sclang-mode))
  (add-to-list 'auto-mode-alist '("\\.sc$" . sclang-mode))

;; Move PostBuffer to right side window
(add-to-list 'display-buffer-alist
            '("\\*SCLang:PostBuffer\\*"
              (display-buffer-in-side-window)
              (side . right)
              (window-width . 60)))


;; ------------------------
;; Custom-set Variables (generated by Emacs, keep as is)
;; ------------------------
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes '(ef-arbutus))
 '(custom-safe-themes
   '("00d7122017db83578ef6fba39c131efdcb59910f0fac0defbe726da8072a0729"
     "ae20535e46a88faea5d65775ca5510c7385cbf334dfa7dde93c0cd22ed663ba0"
     "a3a71b922fb6cbf9283884ac8a9109935e04550bcc5d2a05414a58c52a8ffc47"
     "4c16a8be2f20a68f0b63979722676a176c4f77e2216cc8fe0ea200f597ceb22e"
     "541282f66e5cc83918994002667d2268f0a563205117860e71b7cb823c1a11e9"
     "1ad12cda71588cc82e74f1cabeed99705c6a60d23ee1bb355c293ba9c000d4ac"
     "36c5acdaf85dda0dad1dd3ad643aacd478fb967960ee1f83981d160c52b3c8ac"
     "19b62f442479efd3ca4c1cef81c2311579a98bbc0f3684b49cdf9321bd5dfdbf"
     "d609d9aaf89d935677b04d34e4449ba3f8bbfdcaaeeaab3d21ee035f43321ff1"
     "da69584c7fe6c0acadd7d4ce3314d5da8c2a85c5c9d0867c67f7924d413f4436"
     "b3ba955a30f22fe444831d7bc89f6466b23db8ce87530076d1f1c30505a4c23b"
     "fae5872ff90462502b3bedfe689c02d2fa281bc63d33cb007b94a199af6ccf24"
     "ac893acecb0f1cf2b6ccea5c70ea97516c13c2b80c07f3292c21d6eb0cb45239"
     "df39cc8ecf022613fc2515bccde55df40cb604d7568cb96cd7fe1eff806b863b"
     "e85a354f77ae6c2e47667370a8beddf02e8772a02e1f7edb7089e793f4762a45"
     "b48d0561c520a9f6284eb997a789bf6c599d49b5fe0d0e99e90194c84860c993"
     "395a8345d70ee3dd591fc0615dd172fa158fe422894b098bf59b5675a9acd6b5"
     "a8154615158cfa7533f050bbd1f4705cdbea386140a04988341a5a857799082e"
     "5f9bca97ed63c4694b9b1336297c40b809284701f8012659adafb307e4bb42b5"
     "74795cc6a93384ff97457b8ce632ae0170bf7f8eba959da7710c1f5d7d273334"
     "e939e1560ed06aaf2fc71f076705e6ea0d755910d0abdb9cd85871e9ae9effe8"
     "49f934cfd7e032ec74b27b7dd89a5573279b3306c597b5511e2b5afebf5696a2"
     "43c23cd70b2ce81a1b48dc3973ff1a7c835f3f6ee49d3070236c2f068c2a819e"
     "0735492e73c9ff5d4d11bb1a876b06e595fe39d642e7512111ba38c64c5105ee"
     "d0c05a0b5a7619bca4c28d1bd2eeb15562afa634888a46c9e5b1d31b7d06ed36"
     "82453dac89416285dbd5e16869f165a87e629cfd1978a1ab22e814716ba5cbf7"
     "fc5093155fcec43534c5ed2c80e80fe626b28735732ffa1c6cc4d10ab0568f44"
     "5f824bfa88d589fd9095cf968c68fc4bc96bced31110b7c0822e06388264c15b"
     "af443124becfaa09a1cd9a5d6c610712db9f115225860657764e34d4e02ab43b"
     "9c6aa7eb1bde73ba1142041e628827492bd05678df4d9097cda21b1ebcb8f8b9"
     default))
 '(package-selected-packages
   '(company doric-themes dracula-theme ef-themes ement lua-mode
	     multi-vterm vterm))
 '(sclang-auto-scroll-post-buffer t)
 '(sclang-eval-line-forward nil)
 '(sclang-show-workspace-on-startup nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )


;; ------------------------
;; QWERTZ-friendly paragraph navigation
;; Rebind M-{ (backward-paragraph) and M-} (forward-paragraph) to easier keys
;; ------------------------

;; Example using keys near QWERTY { } positions on QWERTZ
(global-set-key (kbd "C-ü") 'backward-paragraph)   ;; Control + ü for backward paragraph
(global-set-key (kbd "C-+") 'forward-paragraph)    ;; Control + + for forward paragraph

;; Optional: also keep original M-{ and M-} if you want
;; (global-set-key (kbd "M-{") 'backward-paragraph)
;; (global-set-key (kbd "M-}") 'forward-paragraph)


;; Thank you, undltd!!! https://xn--w5d.cc/2024/07/28/supercollider-emacs-highlight-eval.html
(require 'pulse)
(defun my/sclang-highlight-defun (&optional silent-p)
  (cl-multiple-value-bind (beg end) (sclang-point-in-defun-p)
    (when (and beg end)
      (pulse-momentary-highlight-region beg end))))

(defun my/sclang-highlight-region (&optional silent-p)
  (when (use-region-p)
    (pulse-momentary-highlight-region (region-beginning) (region-end))))

(defun my/sclang-highlight-line (&optional silent-p)
  (pulse-momentary-highlight-one-line (point)))

;; Hook into evaluation commands
(advice-add 'sclang-eval-defun :before #'my/sclang-highlight-defun)
(advice-add 'sclang-eval-region :before #'my/sclang-highlight-region)
(advice-add 'sclang-eval-line :before #'my/sclang-highlight-line)



;; --- SuperCollider record setup ---
;; Set path where recordings should be stored
(setq kf/sclang-recording-path "~/sc-recordings")  ;; change this!

(defun kf/sclang-record ()
  "Toggle SuperCollider recording. Files go to `kf/sclang-recording-path`."
  (interactive)
  (sclang-eval-expression
   (format
    "if(s.isRecording) {
       s.stopRecording
     } {
       s.record(
         \"%s/\" ++ Date.localtime.stamp ++ \".wav\",
         numChannels: s.options.numOutputBusChannels
       )
     }"
    (expand-file-name kf/sclang-recording-path))))

;; Keybinding for sclang-mode
(with-eval-after-load 'sclang
  (define-key sclang-mode-map (kbd "<f5>") #'kf/sclang-record))
;; --- End ---


;;SuperCollider Syntax Highlighting
;; Prevent default sclang-mode keywords from being applied
(setq-local font-lock-defaults nil)


;; Path to your exported SC syntax file
(defvar sclang-syntax-file
  "~/.config/sc-syntax-export.txt"
  "File containing SC classes, methods, keywords, etc. for font-locking.")

(defun sclang-load-syntax-definitions ()
  "Load SC syntax elements from file into an alist."
  (with-temp-buffer
    (insert-file-contents sclang-syntax-file)
    (let ((section nil)
          (classes '())
          (class-methods '())
          (instance-methods '())
          (keywords '())
          (constants '())
          (arguments '()))
      (while (not (eobp))
        (let ((line (string-trim (thing-at-point 'line t))))
          (cond
           ((string-match-p "^\\[CLASSES\\]" line) (setq section 'classes))
           ((string-match-p "^\\[CLASS-METHODS\\]" line) (setq section 'class-methods))
           ((string-match-p "^\\[INSTANCE-METHODS\\]" line) (setq section 'instance-methods))
           ((string-match-p "^\\[KEYWORDS\\]" line) (setq section 'keywords))
           ((string-match-p "^\\[CONSTANTS\\]" line) (setq section 'constants))
           ((string-match-p "^\\[ARGUMENTS\\]" line) (setq section 'arguments))
           ((or (string-empty-p line)
                (string-prefix-p "#" line)) nil)
           (t
            (pcase section
              ('classes (push line classes))
              ('class-methods (push line class-methods))
              ('instance-methods (push line instance-methods))
              ('keywords (push line keywords))
              ('constants (push line constants))
              ('arguments (push line arguments))))))
        (forward-line 1))
      `((classes . ,classes)
        (class-methods . ,class-methods)
        (instance-methods . ,instance-methods)
        (keywords . ,keywords)
        (constants . ,constants)
        (arguments . ,arguments)))))

(defun sclang-setup-extra-font-lock ()
  "Add extra syntax highlighting from SC export file."
  (let* ((defs (sclang-load-syntax-definitions))
         ;; Build regexps
         (class-re (regexp-opt (alist-get 'classes defs) 'symbols))
         (class-method-re (regexp-opt (alist-get 'class-methods defs) 'symbols))
         (inst-method-re (regexp-opt (alist-get 'instance-methods defs) 'symbols))
         (keyword-re (regexp-opt (alist-get 'keywords defs) 'symbols))
         (const-re (regexp-opt (alist-get 'constants defs) 'symbols))
         (arg-re (regexp-opt (alist-get 'arguments defs))))
    ;; Add font-lock rules
    (font-lock-add-keywords
     'sclang-mode
     `((,class-re . font-lock-type-face)
      ;; (,class-method-re . font-lock-function-name-face)
      ;; (,inst-method-re . font-lock-function-name-face)
       (,keyword-re . font-lock-keyword-face)
       (,const-re . font-lock-constant-face)
       (,arg-re 1 font-lock-variable-name-face))
     'append)))  ;; 'append ensures it overrides broken default highlighting


;; Hook into sclang-mode
   (add-hook 'sclang-mode-hook #'sclang-setup-extra-font-lock)


